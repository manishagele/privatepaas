<%
/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

(function(){
    var log = new Log("controller.cartridgeSubscribeSubmit");
    var utils = require('/util/utility.jag');
    var jsonRequest = {};
    var error = [];
    jsonRequest = {};
    var cartridgeType = request.getParameter('cartridgeType');
    var alias = request.getParameter('alias');
    var repoURL = request.getParameter('repoURL');
    var isPublicRepo = request.getParameter('isPublicRepo');
    var repoUsername = request.getParameter('repoUsername');
    var repoPassword = request.getParameter('repoPassword');
    var autoscalePolicy = request.getParameter('autoscalePolicy');
    var deploymentPolicy = request.getParameter('deploymentPolicy');
    var size = request.getParameter('size');
    var removeontermination = request.getParameter('removeOnUnsubscription');
    var persistencerequired = request.getParameter('persistencerequired');
    var commitsEnabled = request.getParameter('commitsEnabled');
    var serviceGroup = request.getParameter('serviceGroup');

    if(persistencerequired == "on"){
        persistencerequired = true;
    } else {
        persistencerequired = false;
    }

    if(commitsEnabled == "on"){
        commitsEnabled = true;
    } else {
        commitsEnabled = false;
    }

    if(removeontermination == "on"){
        removeontermination = true;
    } else {
        removeontermination = false;
    }
    // constructing the json request
 //   jsonRequest.cartridgeType = cartridgeType;
    jsonRequest.alias = alias;
    jsonRequest.repoURL = repoURL;
    jsonRequest.privateRepo = !isPublicRepo;
    if(!isPublicRepo){
        jsonRequest.repoUsername = repoUsername;
        jsonRequest.repoPassword = repoPassword;

    }
    jsonRequest.autoscalePolicy = autoscalePolicy;
    jsonRequest.deploymentPolicy = deploymentPolicy;
    jsonRequest.size = size;
    jsonRequest.persistanceRequired = persistencerequired;
    jsonRequest.commitsEnabled = commitsEnabled;
    jsonRequest.removeOnTermination = removeontermination;

    if(serviceGroup != undefined) {
        var step_data = {};
        step_data =  utils.consoleAppUtil.getCartridges();
        if(step_data.Error != undefined){
                error.push(step_data.Error);
        } else {
            if(step_data.Error != undefined){
                error.push(step_data.Error);
            } else {
                step_data = step_data.cartridge;
                for(var i=0;i<step_data.length;i++) {
                    if(step_data[i].serviceGroup == undefined ||
                            step_data[i].serviceGroup == null ||
                            step_data[i].serviceGroup != serviceGroup) {
                        step_data.splice(i,1);
                        i = i - 1;
                    }
                }
                log.debug("Service group data : " + stringify(step_data));

                var repoUrl = null;
                for(var i=0;i<step_data.length;i++) {
                    //subscribe to cartridges separately which falls in the same service group
                    jsonRequest.alias = alias + i;
                    jsonRequest.cartridgeType = step_data[i].cartridgeType;

                    // the following is a great dirty hack to share the same repo between gateway workers and gateway managers :(
                    if (repoUrl != null && repoUrl != undefined) {
                        log.debug("Setting previously created internal repo URL " + repoUrl);
                        // if a repoUrl has been returne with previous subscription response, set it to request params
                        jsonRequest.repoURL = repoUrl;
                    }

                    var re = utils.consoleAppUtil.subscribeToCartridge(jsonRequest);
                    if(re.Error != undefined){
			session.put("errorinbackend", re.Error);                        
                    } else {
                        log.debug("Request :" + stringify(jsonRequest) + ",  \n Response : " + stringify(re)) ;
                        // check if the repo Url returned in response is valid. If so, assign it to a variable to use in the next
                        // subscription call
                        if(re.subscriptionInfo != undefined && re.subscriptionInfo.repositoryURL != undefined &&
                                re.subscriptionInfo.repositoryURL != null) {
                            repoUrl = re.subscriptionInfo.repositoryURL;
                        }
                    }

                }
            }
        }

    } else {
        jsonRequest.cartridgeType = cartridgeType;
        var result = utils.consoleAppUtil.subscribeToCartridge(jsonRequest);
        if(result.Error != undefined){
              session.put("errorinbackend", result.Error);
	}
   }

    response.sendRedirect(request.getContextPath() + '/index.jag');
}());
%>

